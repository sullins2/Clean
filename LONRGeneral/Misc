

Plotting stuff:

# self.iters.append(t)
            #
            # if self.GRIDWORLD:
            #     if self.M.noise > 0:
            #         self.runningSum += self.M.Q[0][36][3]
            #         self.runningSumPI += self.M.pi[0][36][3]
            #     else:
            #         # NORTH
            #         self.runningSum += self.M.Q[0][36][0]
            #         self.runningSumPI += self.M.pi[0][36][0]
            #     #print("RUNPIS: ", self.runningSumPI)
            #     #for x in range(36):
            #     self.PIsums.append(float(self.runningSumPI) / float(t))
            #     self.QSums.append(float(self.runningSum) / float(t))
            #
            # elif self.NOSDE:
            #     # Player 0, state left, KEEP
            #     self.QSumSendRunningSum += self.M.Q[0][1]["SEND"]
            #     self.QSumSEND.append(float(self.QSumSendRunningSum) / float(t))
            #     # Player 0, state left
            #     self.QSumKEEPRunningSum += self.M.Q[0][1]["KEEP"]
            #     self.QSumKEEP.append(float(self.QSumKEEPRunningSum) / float(t))
            #
            #     self.QSumNOOPRunningSum += self.M.Q[0][2]["NOOP"]
            #     self.QSumNOOP.append(float(self.QSumNOOPRunningSum) / float(t))
            #
            #     self.Pi1SUMSENDSum += self.M.pi[0][1]["SEND"]
            #     self.Pi2SUMSENDSum += self.M.pi[1][2]["SEND"]
            #     self.Pi1SEND.append(float(self.Pi1SUMSENDSum) / float(t))
            #     self.Pi2SEND.append(float(self.Pi2SUMSENDSum) / float(t))
            #
            #     self.reg1Sum = self.M.regret_sums[0][1]["SEND"]
            #     self.reg2Sum = self.M.regret_sums[1][2]["SEND"]
            #     self.reg1.append(self.reg1Sum)
            #     self.reg2.append(self.reg2Sum)
            #
            # elif self.SOCCER:
            #     #print("VAL: ", self.M.Q[0]["B21"])
            #     self.QSumSoccerB21RightRunningSum += self.M.Q[0]["B21"][3]
            #     self.QSumSoccerB21Right.append(float(self.QSumSoccerB21RightRunningSum) / float(t))
            # tt = t

            # print("LastAVG: ", float(self.runningSum) / float(tt))
        # print("Avg: ", float(self.runningSum) / float(iterations))
        #print(self.QSumSEND)
        #print(self.QSums)
        #print("PRINTED QSUMS")
        # if self.GRIDWORLD:
        #     return self.QSums, self.PIsums, self.iters
        # elif self.NOSDE:
        #
        #     return self.QSumSEND, self.QSumKEEP, self.QSumNOOP, self.Pi1SEND, self.Pi2SEND, self.reg1, self.reg2, self.iters
        # elif self.SOCCER:
        #     return self.QSumSoccerB21Right, self.iters





                    if self.GRIDWORLD:
                if self.M.noise > 0:
                    self.runningSum += self.M.Q[0][36][3]
                else:
                    self.runningSum += self.M.Q[0][36][0]
                self.QSums.append(float(self.runningSum) / float(t))
            elif self.NOSDE:
                # Player 0, state left, SEND
                self.QSumSendRunningSum += self.M.Q[0][1]["SEND"]
                self.QSumSEND.append(float(self.QSumSendRunningSum) / float(t))
                # Player 0, state left, KEEP
                self.QSumKEEPRunningSum += self.M.Q[0][1]["KEEP"]
                self.QSumKEEP.append(float(self.QSumKEEPRunningSum) / float(t))

                # Player 0, state right NOOP
                self.QSumNOOPRunningSum += self.M.Q[0][2]["NOOP"]
                self.QSumNOOP.append(float(self.QSumNOOPRunningSum) / float(t))

                self.Pi1SUMSENDSum += self.M.pi[0][1]["SEND"]
                self.Pi2SUMSENDSum += self.M.pi[0][2]["SEND"]
                self.Pi1SEND.append(float(self.Pi1SUMSENDSum) / float(t))
                self.Pi2SEND.append(float(self.Pi2SUMSENDSum) / float(t))

            elif self.SOCCER:
                # print("VAL: ", self.M.Q[0]["B21"])
                self.QSumSoccerB21RightRunningSum += self.M.Q[0]["B21"][3]
                self.QSumSoccerB21Right.append(float(self.QSumSoccerB21RightRunningSum) / float(t))

            elif self.TIGERGAME:
                self.LRunningSum += self.M.Q[0]["rootTL"]["L"]
                self.L.append(float(self.LRunningSum) / float(t))
                self.OLRunningSum += self.M.Q[0]["rootTL"]["OL"]
                self.OL.append(float(self.OLRunningSum) / float(t))
                self.ORRunningSum += self.M.Q[0]["rootTL"]["OR"]
                self.OR.append(float(self.ORRunningSum) / float(t))

                self.rootTLLGLLGLRS += self.M.Q[0]["rootTLLGLLGL"]["OR"]
                self.rootTLLGLLGL.append(float(self.rootTLLGLLGLRS) / float(t))

                self.rootTLLGRLGRRS += self.M.Q[0]["rootTLLGRLGR"]["OL"]
                self.rootTLLGRLGR.append(float(self.rootTLLGRLGRRS) / float(t))

                self.rootTLLGLLGRRS += self.M.Q[0]["rootTLLGLLGR"]["L"]
                self.rootTLLGLLGR.append(float(self.rootTLLGLLGRRS) / float(t))

                self.rootTLLGRLGLRS += self.M.Q[0]["rootTLLGRLGL"]["L"]
                self.rootTLLGRLGL.append(float(self.rootTLLGRLGLRS) / float(t))

                self.baseORSum += self.M.pi[0]["rootTLLGLLGL"]["OR"]
                self.baseOLSum += self.M.pi[0]["rootTLLGRLGR"]["OL"]
                self.baseOR.append(float(self.baseORSum) / float(t))
                self.baseOL.append(float(self.baseOLSum) / float(t))



                self.iters.append(t)


                    # print("LastAVG: ", float(self.runningSum) / float(tt))
            # print("Avg: ", float(self.runningSum) / float(iterations))
            # print(self.QSumSEND)
            # print(self.QSums)
            # print("PRINTED QSUMS")
        if self.GRIDWORLD:
            return self.QSums, self.iters
        elif self.NOSDE:

            return self.QSumSEND, self.QSumKEEP, self.QSumNOOP, self.iters
        elif self.SOCCER:
            return self.QSumSoccerB21Right, self.iters

        elif self.TIGERGAME:
            # print("PISUMS:")
            # print("PISUM LGLLGL: ", self.M.pi_sums[0]["rootTLLGLLGL"])
            # print("PISUM LGRLGR: ", self.M.pi_sums[0]["rootTLLGRLGR"])
            # print("PISUM LGLLGR: ", self.M.pi_sums[0]["rootTLLGLLGR"])
            # print("PISUM LGRLGL: ", self.M.pi_sums[0]["rootTLLGRLGL"])
            # print("")
            # print("Q:")
            # print("PISUM LGLLGL: ", self.M.Q[0]["rootTLLGLLGL"])
            # print("PISUM LGRLGR: ", self.M.Q[0]["rootTLLGRLGR"])
            # print("PISUM LGLLGR: ", self.M.Q[0]["rootTLLGLLGR"])
            # print("PISUM LGRLGL: ", self.M.Q[0]["rootTLLGRLGL"])
            sdfs = 3
            # print("Final Q of GRGROL: ", self.rootTLLGRLGR[-1])

            return self.L, self.OL, self.OR, self.rootTLLGLLGL, self.rootTLLGRLGR, self.rootTLLGLLGR, self.rootTLLGRLGL, self.baseOR, self.baseOL, self.iters




            # GRIDWORLD
        # self.runningSum = 0.0
        # self.runningSumPI = 0.0
        # self.PIsums = []

        # NoSDE
        # self.QSumSEND = []
        # self.QSumSendRunningSum = 0.0
        # self.QSumKEEP = []
        # self.QSumKEEPRunningSum = 0.0
        # self.QSumNOOP = []
        # self.QSumNOOPRunningSum = 0.0
        # self.pisumSEND = []
        # self.pisumKEEP = []
        # self.pisumNOOP = []

        # self.Pi1SUMSENDSum = 0.0
        # self.Pi2SUMSENDSum = 0.0
        # self.Pi1SEND = []
        # self.Pi2SEND = []

        # self.reg1Sum = 0.0
        # self.reg2Sum = 0.0
        # self.reg1 = []
        # self.reg2 = []

        # SoccerGame A12
        # self.QSumSoccerB21Right = []
        # self.QSumSoccerB21RightRunningSum = 0.0

        # Tiger Game
        # self.L = []
        # self.LRunningSum = 0.0
        # self.OL = []
        # self.OLRunningSum = 0.0
        # self.OR = []
        # self.ORRunningSum = 0.0
        #
        # self.rootTLLGLLGL = []
        # self.rootTLLGLLGLRS = 0.0
        # self.rootTLLGRLGR = []
        # self.rootTLLGRLGRRS = 0.0
        # self.rootTLLGLLGR = []
        # self.rootTLLGLLGRRS = 0.0
        # self.rootTLLGRLGL = []
        # self.rootTLLGRLGLRS = 0.0
        #
        # self.baseORSum = 0.0
        # self.baseOLSum = 0.0
        # self.baseOR = []
        # self.baseOL = []


# Tiger Game
        # elif self.randomize == True:
        #     print("Tiger game - value iteration")
        #     r = np.random.randint(0, 2)
        #     #if r == 0:
        #     if self.alt == 1:
        #         WW = self.M.totalStatesLeft
        #         self.alt = 2
        #     else:
        #         WW = self.M.totalStatesRight
        #         self.alt = 1
        #
        #     print("WW: ")
        #     print(WW)
        #     for n in range(self.M.N):
        #
        #         # Loop through all states
        #         for s in WW: #self.M.getStates(): #WW:
        #
        #             print(" S in loop: ", s)
        #             # Loop through actions of current player n
        #             # for a in self.M.getActions(s, n):
        #             aa = self.M.getActions(s, n)
        #             # if self.randomize == False:
        #             #     self.QUpdate(n, s, a, randomS=None)
        #             # else:
        #             print("AA: ", aa)
        #             for a in aa:
        #                 #print(" a: ", a)
        #                 al = []
        #                 al.append(a)
        #                 print(" a: ", a)
        #                 self.QUpdate(n, s=s, a_current2=al, randomS=s)




















































        ##################################################################################################


          # def draw(self, weights):
    #
    #     # norm = sum(weights)
    #     # ww = []
    #     # for w in weights:
    #     #     ww.append(w / norm)
    #     # ra = np.random.choice([0,1,2,3], p=ww)
    #     #
    #     # return ra
    #     choice = np.random.uniform(0, sum(weights))
    #     choiceIndex = 0
    #
    #     for weight in weights:
    #         choice -= weight
    #         if choice <= 0:
    #             return choiceIndex
    #
    #         choiceIndex += 1
    #
    # def distr(self, weights, gamma=0.0):
    #     theSum = float(sum(weights))
    #     return list((1.0 - gamma) * (w / theSum) + (gamma / len(weights)) for w in weights)
    #
    # def distrForPISUMS(self, weights, gamma=0.0):
    #     theSum = float(sum(weights))
    #     return list((1.0 - gamma) * (w / theSum) for w in weights) # + (gamma / len(weights))
    #
    # # def mean(self, aList):
    # #     theSum = 0
    # #     count = 0
    # #
    # #     for x in aList:
    # #         theSum += x
    # #         count += 1
    # #
    # #     return 0 if count == 0 else theSum / count
    #
    #
    # def exp3Update(self, n, currentState, numActions, reward, gamma, t, rewardMin = -1.0, rewardMax = 10.0):
    #
    #
    #     if t % 2000 == 0:
    #         verbose = True
    #     else:
    #         verbose = False
    #     if verbose:
    #         print("Iteration: ", t)
    #         print("Current state: ", currentState)
    #
    #     weightsA = {}
    #
    #     # Get weights for actions [UP, RIGHT, DOWN, LEFT]
    #     for a in sorted(self.M.weights[n][currentState].keys()):
    #         weightsA[a] = self.M.weights[n][currentState][a]
    #
    #     # Put weights into a list
    #     weights = []
    #     for a in weightsA.keys():
    #         weights.append(weightsA[a])
    #
    #     if verbose: print("Weights: ", weights)
    #
    #
    #
    #     gamma = self.exp3gamma
    #     # Get distribution
    #     probabilityDistribution = self.distr(weights, gamma)
    #
    #     probDistForPISUMS = self.distrForPISUMS(weights, gamma=0.0)
    #
    #     # Loop thru and set pi
    #     aa = 0
    #     for a in sorted(self.M.weights[0][currentState].keys()):
    #         self.M.pi[0][currentState][a] = probabilityDistribution[aa]
    #         self.M.pi_sums[0][currentState][a] += probDistForPISUMS[aa]
    #         aa += 1
    #
    #     # Get action choice from prob dist
    #     if verbose: print("ProbDist: ", probabilityDistribution)
    #     choice = self.draw(probabilityDistribution)
    #
    #     # Get reward (Q-Value)
    #     if verbose: print("Choice: ", choice)  #0-3
    #     theReward = self.M.Q[0][currentState][choice]
    #
    #     # Scale reward (Not sure this is correct, scaling is set in function arguments above) line 386
    #     if verbose: print("Reward for choice: ", theReward)
    #     scaledReward = (theReward - rewardMin) / (rewardMax - rewardMin)  # rewards scaled to 0,1
    #
    #     # Not entirely sure what this does
    #     if verbose: print("Scaled Reward: ", scaledReward)
    #     estimatedReward = 1.0 * scaledReward / probabilityDistribution[choice]
    #     if verbose: print("Estimated reward: ", estimatedReward)
    #
    #     # Update weights
    #     if verbose: print("Updating choice: ", choice)
    #
    #     #if verbose: print("Weights after: ", self.M.weights[0][currentState])
    #     self.M.weights[0][currentState][choice] *= math.exp(estimatedReward * gamma / float(numActions))  # important that we use estimated reward here!
    #
    #     # minW = self.M.weights[0][currentState][0]
    #     # # if verbose: print("Init min weight: ", self.M.weights[0][currentState][0])
    #     # aa = 0
    #     # for w in self.M.weights[0][currentState].keys():
    #     #     if self.M.weights[0][currentState][w] < minW:
    #     #         minW = self.M.weights[0][currentState][w]
    #     #     aa += 1
    #
    #     # if t % 100 == 0:
    #     #     for w in self.M.weights[0][currentState].keys():
    #     #         #if t < 120: continue
    #     #         # if t % 100 == 0:
    #     #         self.M.weights[0][currentState][w] = self.M.weights[0][currentState][w] - (minW / 1.0) + 1.0
    #     #         # if self.M.weights[0][currentState][w] < 1:
    #     #         #     self.M.weights[0][currentState][w] = 1.0
    #     if verbose: print("")
    #
    #     # Return action
    #     return choice

    # def QLearningPIUpdate(self, n, currentState, t):

######################################################################################

















            # Loop through all actions
            # for a in self.M.getActions(currentState, 0):
            #
            #     # Get successor states
            #     succs = self.M.getNextStatesAndProbs(currentState, a, 0)
            #
            #     Value = 0.0
            #     # Loop through each s', T(s' | s, a)
            #     #   - Last parameter in loop is reward, which eventually will be included
            #     #       -
            #     for s_prime, prob, _ in succs:
            #
            #         tempValue = 0.0
            #         for a_prime in self.M.getActions(s_prime, 0):
            #             tempValue += self.M.Q[n][self.M.getStateRep(s_prime)][a_prime] * self.M.pi[n][self.M.getStateRep(s_prime)][a_prime]
            #         Value += prob * (self.M.getReward(currentState, a, 0,0) + self.gamma * tempValue)
            #
            #         if s_prime not in totStates:
            #             totStates.append(s_prime)
            #
            #     self.M.Q_bu[n][self.M.getStateRep(currentState)][a] = (1.0 - self.alpha) * self.M.Q[n][self.M.getStateRep(currentState)][a] + self.alpha * Value


            # Copy Q Values over for states visited
            # for s in totStates:
            #     for a in self.M.getActions(s, 0):
            #         self.M.Q[n][self.M.getStateRep(s)][a] = self.M.Q_bu[n][self.M.getStateRep(s)][a]
            #         # self.Qsums[self.tigergame.getStateRep(s)][a] += self.Q_bu[self.tigergame.getStateRep(s)][a]

###################################################################################

# Calculate regret - this variable name needs a better name
            # target = 0.0
            #
            # for a in self.M.getActions(currentState, 0):
            #     target += self.M.Q[n][self.M.getStateRep(currentState)][a] * self.M.pi[n][self.M.getStateRep(currentState)][a]
            #
            # for a in self.M.getActions(currentState, 0):
            #     action_regret = self.M.Q[n][self.M.getStateRep(currentState)][a] - target
            #
            #     #RMPLUS = True
            #     if self.RMPLUS:
            #         self.M.regret_sums[n][self.M.getStateRep(currentState)][a] = max(0.0, self.M.regret_sums[n][self.M.getStateRep(currentState)][a] + action_regret)
            #     else:
            #         self.M.regret_sums[n][self.M.getStateRep(currentState)][a] += action_regret
            #
            #
            # # Skip terminal states
            # # if self.M.isTerminal(self.M.getStateRep(currentState)) == True:
            # #     continue
            #
            # for a in self.M.getActions(self.M.getStateRep(currentState), 0):
            #
            #     # Sum up total regret
            #     rgrt_sum = 0.0
            #     for k in self.M.regret_sums[n][self.M.getStateRep(currentState)].keys():
            #         rgrt_sum += self.M.regret_sums[n][self.M.getStateRep(currentState)][k] if self.M.regret_sums[n][self.M.getStateRep(currentState)][k] > 0 else 0.0
            #
            #     # Check if this is a "trick"
            #     # Check if this can go here or not
            #     if rgrt_sum > 0:
            #         self.M.pi[n][self.M.getStateRep(currentState)][a] = (max(self.M.regret_sums[n][self.M.getStateRep(currentState)][a], 0.)) / rgrt_sum
            #     else:
            #         self.M.pi[n][self.M.getStateRep(currentState)][a] = 1.0 / len(self.M.getActions(self.M.getStateRep(currentState),0))
            #
            #     # Add to policy sum
            #     self.M.pi_sums[n][self.M.getStateRep(currentState)][a] += self.M.pi[n][self.M.getStateRep(currentState)][a]


#####################################################################################################




# if self.M.isTerminal(s): return True
        # if self.M.isTerminal(s):
        #     self.M.Q_bu[n][s][a_current] = (1.0 - self.alpha) * self.M.Q[n][s][a_current] + self.alpha * self.M.getReward(s, a_current, 0, 0)
        #     continue
        #
        # # Get next states and transition probs for MDP
        # # Get next states and other players policy for MG
        # succs = self.M.getNextStatesAndProbs(s, a_current, n)
        # # print("s: ", s, " a:", a_current, "   succs: ", succs)
        #
        # # print("  SUCCS: ", succs)
        # Value = 0.0
        #
        # # Loop thru each next state and prob
        # for s_prime, prob, reward in succs:
        #     # print(" - s_prime: ", s_prime, "  prob: ", prob, "  reward: ", reward)
        #     tempValue = 0.0
        #
        #     # Loop thru actions in s_prime for player n
        #     for a_current_prime in self.M.getActions(s_prime, n):
        #         tempValue += self.M.Q[n][s_prime][a_current_prime] * self.M.pi[n][s_prime][a_current_prime]
        #
        #     Value += prob * (reward + self.gamma * tempValue)
        #
        # self.M.Q_bu[n][s][a_current] = (1.0 - self.alpha) * self.M.Q[n][s][a_current] + (self.alpha) * Value

        # print("Entered QUpdate: ", " s: ", currentState, " a:", a_current)
        # if self.M.isTerminal(self.M.getStateRep(currentState)) == True:
        #     self.M.Q_bu[n][self.M.getStateRep(currentState)][a_current] = (1.0 - self.alpha) * self.M.Q[n][self.M.getStateRep(currentState)][a_current] + self.alpha * self.M.getReward(self.M.getStateRep(currentState), a_current, 0, 0)
        #     #for a in self.M.getActions(currentState, n):
        #         # Note, the reward is via the actual state, so there is no getStateRep()
        #     #    self.M.Q_bu[n][self.M.getStateRep(currentState)][a] = (1.0 - self.alpha) * self.M.Q[n][self.M.getStateRep(currentState)][a] + self.alpha * self.M.getReward(currentState, a, a, a)
        #     return
        #     # done = True
        #     # continue
        #
        # # totStates keeps track of which states need Qvalue copying
        # #   as not all states need to be backed up, only the ones visited
        # totStates = []
        # totStates.append(currentState)
        #
        # # Loop through all actions
        # for a in self.M.getActions(currentState, n):
        #     # print(" - in loop a: ", a)
        #     # Get successor states
        #     succs = self.M.getNextStatesAndProbs(currentState, a, n)
        #
        #     Value = 0.0
        #     # Loop through each s', T(s' | s, a)
        #     #   - Last parameter in loop is reward, which eventually will be included
        #     #       -
        #     for s_prime, prob, _ in succs:
        #
        #         tempValue = 0.0
        #         for a_prime in self.M.getActions(s_prime, n):
        #             # print("  -- SR: ", self.M.getStateRep(s_prime))
        #             # print("    - ", self.M.Q[n][self.M.getStateRep(s_prime)]) #self.M.pi[n][self.M.getStateRep(s_prime)][a_prime])
        #             tempValue += self.M.Q[n][self.M.getStateRep(s_prime)][a_prime] * self.M.pi[n][self.M.getStateRep(s_prime)][a_prime]
        #         Value += prob * (self.M.getReward(self.M.getStateRep(currentState), a, 0, 0) + self.gamma * tempValue)
        #
        #         # REMOVE: Q[S_PRIME] is not updated/changed
        #         if s_prime not in totStates:
        #             totStates.append(s_prime)
        #
        #     self.M.Q_bu[n][self.M.getStateRep(currentState)][a_current] = (1.0 - self.alpha) * self.M.Q[n][self.M.getStateRep(currentState)][a_current] + self.alpha * Value

        # Copy Q Values over for states visited
        # for s in totStates:
        #     for a in self.M.getActions(s, n):
        #         self.M.Q[n][self.M.getStateRep(s)][a] = self.M.Q_bu[n][self.M.getStateRep(s)][a]
                # self.Qsums[self.tigergame.getStateRep(s)][a] += self.Q_bu[self.tigergame.getStateRep(s)][a]

        # Don't update terminal states
        # if self.M.isTerminal(self.M.getStateRep(currentState)) == True:
        #     continue

#############################################################################


 #             if self.M.isTerminal(s):
        #                 self.M.Q_bu[n][s][a_current] = (1.0 - self.alpha)*self.M.Q[n][s][a_current] + self.alpha*self.M.getReward(s, a_current, 0,0)
        #                 continue
        #
        #             # Get next states and transition probs for MDP
        #             # Get next states and other players policy for MG
        #             succs = self.M.getNextStatesAndProbs(s, a_current, n)
        #             #print("s: ", s, " a:", a_current, "   succs: ", succs)
        #
        #             #print("  SUCCS: ", succs)
        #             Value = 0.0
        #
        #             #Loop thru each next state and prob
        #             for s_prime, prob, reward in succs:
        #                 #print(" - s_prime: ", s_prime, "  prob: ", prob, "  reward: ", reward)
        #                 tempValue = 0.0
        #
        #                 # Loop thru actions in s_prime for player n
        #                 for a_current_prime in self.M.getActions(s_prime, n):
        #                     tempValue += self.M.Q[n][s_prime][a_current_prime] * self.M.pi[n][s_prime][a_current_prime]
        #
        #                 Value += prob * (reward + self.gamma * tempValue)
        #
        #             self.M.Q_bu[n][s][a_current] = (1.0 - self.alpha)*self.M.Q[n][s][a_current] + (self.alpha)*Value
        #
        #
        # ####################################################################################################
        #
        # Back up Q
        # for n in range(self.M.N):
        #     for s in self.M.getStates():
        #         for a in self.M.getActions(s, n):
        #             self.M.Q[n][s][a] = self.M.Q_bu[n][s][a]
        #             self.M.QSums[n][s][a] += self.M.Q[n][s][a]

        # Regrets / policy updates, etc
        # For each player

        # iters = t + 1
        # alphaR = 3.0 / 2.0  # accum pos regrets
        # betaR = 0.0         # accum neg regrets
        # gammaR = 2.0        # contribution to avg strategy
        #
        # alphaW = pow(iters, alphaR)
        # alphaWeight = (alphaW / (alphaW + 1))
        #
        # betaW = pow(iters, betaR)
        # betaWeight = (betaW / (betaW + 1))
        #
        # gammaWeight = pow((iters / (iters + 1)), gammaR)
        #
        # for n in range(self.M.N):
        #
        #     # For each state
        #     for s in self.M.getStates():
        #
        #         # Skip terminals
        #         if self.M.isTerminal(s): continue
        #
        #         target = 0.0
        #         for a in self.M.getActions(s, n):
        #             target += self.M.Q[n][s][a] * self.M.pi[n][s][a]
        #
        #         for a in self.M.getActions(s, n):
        #             action_regret = self.M.Q[n][s][a] - target
        #
        #             if self.DCFR:
        #                 if action_regret > 0:
        #                     action_regret *= alphaWeight
        #                 else:
        #                     action_regret *= betaWeight
        #
        #             self.M.regret_sums[n][s][a] += action_regret
        #             #self.M.regret_sums[n][s][a] = max(0.0, self.M.regret_sums[n][s][a] + action_regret)
        #
        #     for s in self.M.getStates():
        #
        #         # Skip terminals
        #         if self.M.isTerminal(s): continue
        #
        #         rgrt_sum = 0.0
        #         for a in self.M.getActions(s, n):
        #             rgrt_sum += max(0.0, self.M.regret_sums[n][s][a])
        #
        #         for a in self.M.getActions(s, n):
        #             if rgrt_sum > 0:
        #                 self.M.pi[n][s][a] = (max(self.M.regret_sums[n][s][a], 0.0) / rgrt_sum)
        #             else:
        #                 self.M.pi[n][s][a] = 1. / len(self.M.getActions(s, n))
        #
        #             if self.DCFR:
        #                 self.M.pi_sums[n][s][a] += self.M.pi[n][s][a] * gammaWeight
        #             else:
        #                 self.M.pi_sums[n][s][a] += self.M.pi[n][s][a]









##################################




#
# import numpy as np
#
#
# class MDP(object):
#
#     def __init__(self, startState=None):
#
#         # Check if these are used
#         self.totalPlayers = 1
#         self.totalStates = 1
#
#         # Initialized here but must be defined/created in created class
#         self.Q = None
#         self.Q_bu = None
#         self.QSums = None
#         self.pi = None
#         self.pi_sums = None
#         self.regret_sums = None
#
#         self.startState = startState
#
#     def getActions(self, s, n):
#         """ Returns list of actions
#
#         """
#         raise NotImplementedError("Please implement information_set method")
#
#     def getNextStatesAndProbs(self, s, a_current, n_current):
#         """ Returns list of [ [next_state, prob, rew] ]
#
#         """
#         raise NotImplementedError("Please implement information_set method")
#
#
#     def getReward(self, s, a_current, n, a_notN):
#         """ s=state, a_current=actionOfPlayer n, n is current player, a_notN is action of other player
#             Joint Actions required for Markov Games
#             a_notN can be set to 0 for MDPs and ignored
#
#         Returns reward(s, a, a_other)
#
#         """
#         raise NotImplementedError("Please implement information_set method")
#
#     def getStates(self):
#         """Return List of States
#
#         """
#         raise NotImplementedError("Please implement information_set method")
#
#     def isTerminal(self, s):
#         raise NotImplementedError("Please implement information_set method")
#
#
#     # The following are only needed for O-LONR
#
#     def getMove(self, s, a):
#         """Used to get actual move in the environment for O-LONR
#         """
#         raise NotImplementedError("Please implement information_set method")
#
#     def getStateRep(self, s):
#         """ O-LONR use only
#
#             For MDPs: simply returns state
#             For TigerGame: Maps both to one (EX: TLL & TRL -> TLL) aka one set of Q Values
#         """
#         raise NotImplementedError("Please implement information_set method")
#
# class LONR(object):
#
#     # M: Markov game (MDP, markov game, tiger game)
#
#     def __init__(self, M=None, gamma=1.0, alpha=1.0, epsilon=10, alphaDecay=1.0, DCFR=False):
#         self.M = M
#         #self.N = M.totalPlayers
#         #self.S = M.totalStates
#
#         self.gamma = gamma
#         self.alpha = alpha
#         self.epsilon = epsilon
#         self.alphaDecay = alphaDecay
#
#
#         self.DCFR = DCFR
#
#     def lonr_value_iteration(self, iterations=-1, log=-1):
#
#         print("Starting training..")
#         for t in range(1, iterations+1):
#
#             if (t+1) % log == 0:
#                 print("Iteration: ", t+1, " alpha: ", self.alpha)
#
#             self._lonr_value_iteration(t=t)
#             #print("")
#             self.alpha *= self.alphaDecay
#             self.alpha = max(0.0, self.alpha)
#
#         print("Finish Training")
#
#     def _lonr_value_iteration(self, t):
#
#         # Loop through all players
#         for n in range(self.M.N):
#             #print("N: ", n)
#
#             # Loop through all states
#             for s in self.M.getStates():
#                 #print(" s: ", s)
#
#                 # Loop through actions of current player n
#                 for a_current in self.M.getActions(s, n):
#                     #print("  a_current: ", a_current)
#
#                     if self.M.isTerminal(s):
#                         # This is here because terminals have actions like "exit"
#                         # to collect the reward. To make the code easier, the terminals
#                         # have the same actions as everywhere else, but each action is an "exit"
#                         #
#                         # This was a remnant of when I was using numpy arrays and couldn't set the size
#                         # for one index different than the rest easily (Q[totalStates][totalActions] for
#                         # instance, but Q[terminals][oneExitAction]
#                         #
#                         # But now the MDP class handles that, and if I change them all to dicts/maps
#                         # and not numpy arrays, I wont need this special case here.
#                         #
#                         # This works out below if/when an expectation is taken because the initial
#                         # uniform policy never changes so the expected value = reward
#                         #
#                         # I might possibly change it so that instead of setting it here,
#                         # M.getActions(terminal) returns one exit action
#                         self.M.Q_bu[n][s][a_current] = (1.0 - self.alpha)*self.M.Q[n][s][a_current] * + self.alpha*self.M.getReward(s, a_current, 0,0)
#                         #print("Terminal: ", s)
#                         continue
#
#                     # Get next states and transition probs for MDP
#                     # Get next states and other players policy for MG
#                     succs = self.M.getNextStatesAndProbs(s, a_current, n)
#                     #print("s: ", s, " a:", a_current, "   succs: ", succs)
#
#
#                     Value = 0.0
#
#                     #Loop thru each next state and prob
#                     for s_prime, prob, reward in succs:
#                         #print(" - s_prime: ", s_prime, "  prob: ", prob, "  reward: ", reward)
#                         tempValue = 0.0
#
#                         # Loop thru actions in s_prime for player n
#                         for a_current_prime in self.M.getActions(s_prime, n):
#                             tempValue += self.M.Q[n][s_prime][a_current_prime] * self.M.pi[n][s_prime][a_current_prime]
#
#                         Value += prob * (reward + self.gamma * tempValue)
#
#                     self.M.Q_bu[n][s][a_current] = (1.0 - self.alpha)*self.M.Q[n][s][a_current] + (self.alpha)*Value
#
#
#         ####################################################################################################
#
#         # Back up Q
#         for n in range(self.M.N):
#             for s in self.M.getStates():
#                 for a in self.M.getActions(s, n):
#                     self.M.Q[n][s][a] = self.M.Q_bu[n][s][a]
#                     self.M.QSums[n][s][a] += self.M.Q[n][s][a]
#
#         # Regrets / policy updates, etc
#         # For each player
#
#         iters = t + 1
#         alphaR = 3.0 / 2.0  # accum pos regrets
#         betaR = 0.0         # accum neg regrets
#         gammaR = 2.0        # contribution to avg strategy
#
#         alphaW = pow(iters, alphaR)
#         alphaWeight = (alphaW / (alphaW + 1))
#
#         betaW = pow(iters, betaR)
#         betaWeight = (betaW / (betaW + 1))
#
#         gammaWeight = pow((iters / (iters + 1)), gammaR)
#
#         # Update regret sums
#         for n in range(self.M.N):
#
#             # For each state
#             for s in self.M.getStates():
#
#                 # Skip terminals
#                 if self.M.isTerminal(s): continue
#
#                 target = 0.0
#                 for a in self.M.getActions(s, n):
#                     target += self.M.Q[n][s][a] * self.M.pi[n][s][a]
#
#                 for a in self.M.getActions(s, n):
#                     action_regret = self.M.Q[n][s][a] - target
#
#                     if self.DCFR:
#                         if action_regret > 0:
#                             action_regret *= alphaWeight
#                         else:
#                             action_regret *= betaWeight
#
#                     self.M.regret_sums[n][s][a] += action_regret
#                     #self.M.regret_sums[n][s][a] = max(0.0, self.M.regret_sums[n][s][a] + action_regret)
#
#             # Update pi and pi sums
#             for s in self.M.getStates():
#
#                 # Skip terminals
#                 if self.M.isTerminal(s): continue
#
#                 rgrt_sum = 0.0
#                 for a in self.M.getActions(s, n):
#                     rgrt_sum += max(0.0, self.M.regret_sums[n][s][a])
#
#                 for a in self.M.getActions(s, n):
#                     if rgrt_sum > 0:
#                         self.M.pi[n][s][a] = (max(self.M.regret_sums[n][s][a], 0.0) / rgrt_sum)
#                     else:
#                         self.M.pi[n][s][a] = 1. / len(self.M.getActions(s, n))
#
#                     if self.DCFR:
#                         self.M.pi_sums[n][s][a] += self.M.pi[n][s][a] * gammaWeight
#                     else:
#                         self.M.pi_sums[n][s][a] += self.M.pi[n][s][a]
#
#
#     def lonr_online(self, iterations=-1, log=-1, randomized=False):
#
#         print("Starting training..")
#         for t in range(1, iterations+1):
#
#             if (t+1) % log == 0:
#                 print("Iteration: ", t+1, " alpha:", self.alpha)
#
#             self._lonr_online(t=t, totalIterations=iterations, randomized=randomized)
#
#
#
#             self.alpha *= self.alphaDecay
#             self.alpha = max(0.0, self.alpha)
#
#         print("Finish Training")
#
#
#     def _lonr_online(self, t=0, totalIterations=-1, randomized=False):
#         """
#
#         :param t: current iteration
#         :param totalIterations: total iterations
#         :param randomized: Randomizes the start state.
#                         True: For Tiger Game, to switch between TigerOnLeft, TigerOnRight
#                         False: For GridWorld, only one start state.
#         :return:
#         """
#
#
#         # For Tiger Game, randomize the MDP it sees
#         if randomized:
#
#             # Get the top root
#             startStates = self.M.getNextStatesAndProbs(self.M.startState, None, 0)
#
#             totalStartStates = []
#             totalStartStateProbs = []
#
#             # Pick Tiger on Left/Right based on probability set in M
#             for nextState, nextStateProb, _ in startStates:
#                 totalStartStates.append(nextState)
#                 totalStartStateProbs.append(nextStateProb)
#
#             # Randomly pick TigerOnLeft/Right based on M.TLProb (1-M.TLProb = TRProb)
#             currentState = np.random.choice(totalStartStates, p=totalStartStateProbs)
#
#         # For GridWorld, set currentState to the startState
#         else:
#             currentState = self.M.startState
#
#
#         done = False
#         n = 0  # One player
#
#         # Episode loop - until terminal state is reached
#         while done == False:
#
#             # Terminal - Set Q as Reward (ALL terminals have one action - "exit" which receives reward)
#             # Note:
#             #       GridWorld Terminals have the same 4 actions.
#             #           All get set here to the full reward
#             #           pi for each action remains 1 / totalActions
#             #       I intend to remove this part and include terminal rewards below in successors
#             #       But for now, in the expectation taken below, the value is correct:
#             #           For example:
#             #               Q[term] = (1/4)Reward + (1/4)Reward + (1/4)Reward + (1/4)Reward = Reward
#             #
#             #       Also, this backup is split via self.alpha.
#             #           For GridWorld, this does nothing (self.alpha = 1.0, removes the first part)
#             #           For Tiger Game, this allows shared Q's to converge and not be overwritten
#             if self.M.isTerminal(currentState) == True:
#                 for a in self.M.getActions(currentState, 0):
#                     # Note, the reward is via the actual state, so there is no getStateRep()
#                     self.M.Q_bu[n][self.M.getStateRep(currentState)][a] = (1.0 - self.alpha) * self.M.Q[n][self.M.getStateRep(currentState)][a] + self.alpha * self.M.getReward(currentState,a,a,a)
#                 done = True
#                 continue
#
#
#             # totStates keeps track of which states need Qvalue copying
#             #   as not all states need to be backed up, only the ones visited
#             totStates = []
#             totStates.append(currentState)
#
#             # Loop through all actions
#             for a in self.M.getActions(currentState, 0):
#
#                 # Get successor states
#                 succs = self.M.getNextStatesAndProbs(currentState, a, 0)
#
#                 Value = 0.0
#                 # Loop through each s', T(s' | s, a)
#                 #   - Last parameter in loop is reward, which eventually will be included
#                 #       -
#                 for s_prime, prob, _ in succs:
#
#                     tempValue = 0.0
#                     for a_prime in self.M.getActions(s_prime, 0):
#                         tempValue += self.M.Q[n][self.M.getStateRep(s_prime)][a_prime] * self.M.pi[n][self.M.getStateRep(s_prime)][a_prime]
#                     Value += prob * (self.M.getReward(currentState, a, 0,0) + self.gamma * tempValue)
#
#                     if s_prime not in totStates:
#                         totStates.append(s_prime)
#
#                 self.M.Q_bu[n][self.M.getStateRep(currentState)][a] = (1.0 - self.alpha) * self.M.Q[n][self.M.getStateRep(currentState)][a] + self.alpha * Value
#
#
#             # if max(list(self.M.Q[0][36].values())) -  max(list(self.M.Q_bu[0][36].values())) != 0:
#             #     print("Difference: ", max(list(self.M.Q[0][36].values())) -  max(list(self.M.Q_bu[0][36].values())))
#
#             # Copy Q Values over for states visited
#             for s in totStates:
#                 for a in self.M.getActions(s, 0):
#                     self.M.Q[n][self.M.getStateRep(s)][a] = self.M.Q_bu[n][self.M.getStateRep(s)][a]
#                     # self.Qsums[self.tigergame.getStateRep(s)][a] += self.Q_bu[self.tigergame.getStateRep(s)][a]
#
#
#             # Don't update terminal states
#             # if self.M.isTerminal(self.M.getStateRep(currentState)) == True:
#             #     continue
#
#             # Calculate regret - this variable name needs a better name
#             target = 0.0
#
#             for a in self.M.getActions(currentState, 0):
#                 target += self.M.Q[n][self.M.getStateRep(currentState)][a] * self.M.pi[n][self.M.getStateRep(currentState)][a]
#
#             for a in self.M.getActions(currentState, 0):
#                 action_regret = self.M.Q[n][self.M.getStateRep(currentState)][a] - target
#
#                 RMPLUS = True
#                 if RMPLUS:
#                     self.M.regret_sums[n][self.M.getStateRep(currentState)][a] = max(0.0, self.M.regret_sums[n][self.M.getStateRep(currentState)][a] + action_regret)
#                 else:
#                     self.M.regret_sums[n][self.M.getStateRep(currentState)][a] += action_regret
#
#
#             # Skip terminal states
#             # if self.M.isTerminal(self.M.getStateRep(currentState)) == True:
#             #     continue
#
#             for a in self.M.getActions(self.M.getStateRep(currentState), 0):
#
#                 # Sum up total regret
#                 rgrt_sum = 0.0
#                 for k in self.M.regret_sums[n][self.M.getStateRep(currentState)].keys():
#                     rgrt_sum += self.M.regret_sums[n][self.M.getStateRep(currentState)][k] if self.M.regret_sums[n][self.M.getStateRep(currentState)][k] > 0 else 0.0
#
#                 # Check if this is a "trick"
#                 # Check if this can go here or not
#                 if rgrt_sum > 0:
#                     self.M.pi[n][self.M.getStateRep(currentState)][a] = (max(self.M.regret_sums[n][self.M.getStateRep(currentState)][a], 0.)) / rgrt_sum
#                 else:
#                     self.M.pi[n][self.M.getStateRep(currentState)][a] = 1.0 / len(self.M.getActions(self.M.getStateRep(currentState),0))
#
#                 # Add to policy sum
#                 self.M.pi_sums[n][self.M.getStateRep(currentState)][a] += self.M.pi[n][self.M.getStateRep(currentState)][a]
#
#             # Epsilon Greedy action selection
#             if np.random.randint(0, 100) < int(self.epsilon):
#                 totalActions = self.M.getActions(currentState, 0)
#                 randomAction = np.random.randint(0, len(totalActions))
#                 randomAction = totalActions[randomAction]
#
#             else:
#
#                 totalActions = []
#                 totalActionsProbs = []
#                 ta = self.M.getActions(currentState, 0)
#                 for action in ta:
#                     totalActions.append(action)
#                     totalActionsProbs.append(self.M.pi[n][self.M.getStateRep(currentState)][action])
#                 #print(totalActionsProbs)
#                 randomAction = np.random.choice(totalActions, p=totalActionsProbs)
#
#             # randomAction picked, now simulate taking action
#             #       GridWorld: This will handle non-determinism, if there is non-determinism
#             #       TigerGame: This will either get the one next state OR
#             #                       if action is LISTEN, it will return next state based on
#             #                       observation accuracy aka (85/15) or (15/85), which is
#             #                       equivalent to hearing a growl left or growl right
#             nextPossStates = self.M.getNextStatesAndProbs(currentState, randomAction, 0)
#
#             # If there is only one successor state, pick that
#             if len(nextPossStates) == 1:
#                 # nextPossStates is list of lists
#                 # nextPossStates = [[next_state, prob, reward]]
#                 currentState = nextPossStates[0][0]
#
#             # More than one possible successor, pick via probabilities
#             #       GridWorld non-determ:
#             #           3 states: 1-self.noise, (1-self.noise)/2, (1-self.noise)/2
#             #               ex: 0.8, 0.1, 0.1 for randomAction, to the side, to the side
#             #
#             #       Tiger Game:
#             #           Only happens when randomAction is Listen
#             #               Return is based on which side tiger is on, and the obs accuracy
#             else:
#                 nextStates = []
#                 nextStateProbs = []
#                 for ns, nsp,_ in nextPossStates:
#                     nextStates.append(ns)
#                     nextStateProbs.append(nsp)
#                 currentState = np.random.choice(nextStates, p=nextStateProbs)




##########################################################################################

# NOSDE LP
# A = [[0, 1.5], [3, 1], [1, 0], [1, 1]]
# def ce(A, solver=None):
#     num_vars = len(A)
#     # maximize matrix c
#     c = [sum(i) for i in A] # sum of payoffs for both players
#     c = np.array(c, dtype="float")
#     c = matrix(c)
#     c *= -1 # cvxopt minimizes so *-1 to maximize
#     # constraints G*x <= h
#     G = build_ce_constraints(A=A)
#     G = np.vstack([G, np.eye(num_vars) * -1]) # > 0 constraint for all vars
#     h_size = len(G)
#     G = matrix(G)
#     h = [0 for i in range(h_size)]
#     h = np.array(h, dtype="float")
#     h = matrix(h)
#     # contraints Ax = b
#     A = [1 for i in range(num_vars)]
#     A = np.matrix(A, dtype="float")
#     A = matrix(A)
#     b = np.matrix(1, dtype="float")
#     b = matrix(b)
#     sol = solvers.lp(c=c, G=G, h=h, A=A, b=b, solver=solver)
#     return sol
#
# def build_ce_constraints(A):
#     num_vars = int(len(A) ** (1/2))
#     G = []
#     # row player
#     for i in range(num_vars): # action row i
#         for j in range(num_vars): # action row j
#             if i != j:
#                 constraints = [0 for i in A]
#                 base_idx = i * num_vars
#                 comp_idx = j * num_vars
#                 for k in range(num_vars):
#                     constraints[base_idx+k] = (- A[base_idx+k][0] + A[comp_idx+k][0])
#                 G += [constraints]
#     # col player
#     for i in range(num_vars): # action column i
#         for j in range(num_vars): # action column j
#             if i != j:
#                 constraints = [0 for i in A]
#                 for k in range(num_vars):
#                     constraints[i + (k * num_vars)] = (
#                         - A[i + (k * num_vars)][1]
#                         + A[j + (k * num_vars)][1])
#                 G += [constraints]
#     return np.matrix(G, dtype="float")
#
# sol = ce(A=A, solver="glpk")
# probs = sol["x"]
# print(probs)